name: TradingAI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort mypy flake8
          pip install -r requirements.txt
          
      - name: Format with black
        run: black --check --diff .
        
      - name: Sort imports with isort
        run: isort --check-only --diff .
        
      - name: Lint with flake8
        run: flake8 src/ research/ tests/ --max-line-length=79 --ignore=E203,W503
        
      - name: Type check with mypy
        run: mypy src/ --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          pip install -r requirements.txt
          
      - name: Run tests with coverage
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html tests/
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  smoke-test-ml:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install ML dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run ML pipeline smoke test
        run: |
          python -c "
          from research.ml_pipeline import build_features_labels, train_rf_walkforward
          import pandas as pd
          import numpy as np
          
          # Generate minimal test data
          dates = pd.date_range('2023-01-01', periods=100, freq='D')
          df = pd.DataFrame({
              'Open': 100 + np.random.randn(100),
              'High': 105 + np.random.randn(100),
              'Low': 95 + np.random.randn(100),
              'Close': 100 + np.random.randn(100),
              'Volume': 1000 + np.random.randint(0, 1000, 100)
          }, index=dates)
          
          X, y, _ = build_features_labels(df)
          models, _ = train_rf_walkforward(X, y, n_splits=2)
          print(f'Smoke test passed: trained {len(models)} models')
          "
          
      - name: Test Qlib integration
        run: |
          python research/qlib_integration.py

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security scan with bandit
        run: |
          pip install bandit
          bandit -r src/ -f json -o security-report.json || true
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.json

  build-docker:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        run: |
          docker build -t tradingai-bot:latest .
          
      - name: Test Docker image
        run: |
          docker run --rm tradingai-bot:latest python -c "import src.main; print('Docker image works!')"

  deploy:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add integration test commands here
          
      - name: Notify Telegram
        if: always()
        run: |
          echo "Sending deployment notification to Telegram..."
          # Add Telegram notification command here