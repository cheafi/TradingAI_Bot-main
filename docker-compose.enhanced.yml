version: '3.8'

services:
  # Trading AI Bot
  tradingai-bot:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      target: production
    container_name: tradingai-bot
    restart: unless-stopped
    environment:
      - LOG_LEVEL=INFO
      - TRADING_MODE=paper
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./results:/app/results
      - ./logs:/app/logs
      - ./secrets.toml:/app/secrets.toml:ro
    ports:
      - "8501:8501"  # Streamlit UI
      - "8080:8080"  # API endpoint
    networks:
      - tradingai-network
    healthcheck:
      test: ["CMD", "python", "-c", "import src.main; print('Health OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: tradingai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - tradingai-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # PostgreSQL for data storage
  postgres:
    image: postgres:15-alpine
    container_name: tradingai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: tradingai
      POSTGRES_USER: tradingai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - tradingai-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: tradingai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - tradingai-bot
    networks:
      - tradingai-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tradingai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - tradingai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tradingai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - tradingai-network

  # ML Training Service (GPU support)
  ml-trainer:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      target: development
    container_name: tradingai-ml-trainer
    restart: "no"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - TRAINING_MODE=true
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./results:/app/results
    networks:
      - tradingai-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - gpu

networks:
  tradingai-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
